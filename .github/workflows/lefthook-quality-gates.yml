# Lefthook Quality Gates - Mandatory for GitHub Copilot Agent
# Ensures all commits pass quality checks before merging
# Replaces pre-commit with faster lefthook implementation

name: Lefthook Quality Gates

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

env:
  NODE_VERSION: "22"

jobs:
  # ============================================================================
  # Lefthook Quality Enforcement - Mandatory for GitHub Copilot Agent
  # ============================================================================
  lefthook-quality-gates:
    name: ü™ù Lefthook Quality Gates (Mandatory)
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      skip: ${{ steps.check_skip.outputs.skip }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          # Fetch full history for better diff analysis
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Check if skip CI
        id: check_skip
        run: |
          # Get the last commit message
          LAST_COMMIT_MSG=$(git log -1 --pretty=%B)
          LAST_COMMIT_AUTHOR=$(git log -1 --pretty=%an)

          echo "Last commit author: $LAST_COMMIT_AUTHOR"
          echo "Last commit message: $LAST_COMMIT_MSG"

          # Skip if commit is from github-actions[bot] and contains [skip ci]
          if [[ "$LAST_COMMIT_AUTHOR" == "github-actions[bot]" ]] && [[ "$LAST_COMMIT_MSG" == *"[skip ci]"* ]]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Skipping quality gates for automated demo regeneration commit"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "üîç Running quality gates for regular commit"
          fi

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        if: steps.check_skip.outputs.skip == 'false'
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        if: steps.check_skip.outputs.skip == 'false'
        run: npm ci

      - name: Install gitleaks
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o /usr/local/bin/gitleaks
          chmod +x /usr/local/bin/gitleaks

      - name: Install lefthook
        if: steps.check_skip.outputs.skip == 'false'
        run: npm run hooks:install

      - name: Verify lefthook installation
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          echo "üîç Verifying lefthook installation..."
          npx lefthook version
          npx lefthook dump

      - name: Run lefthook pre-commit checks (Security & Quality)
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          echo "üîí Running security and quality checks..."
          npx lefthook run pre-commit --verbose

      - name: Run lefthook pre-push checks (Tests & Validation)
        if: steps.check_skip.outputs.skip == 'false'
        run: |
          echo "üß™ Running comprehensive tests and validation..."
          npx lefthook run pre-push --verbose

      - name: Generate quality report
        if: always()
        run: |
          if [ "${{ steps.check_skip.outputs.skip }}" == "true" ]; then
            echo "## ü™ù Lefthook Quality Report - SKIPPED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚ÑπÔ∏è Automated Demo Regeneration Commit" >> $GITHUB_STEP_SUMMARY
            echo "Quality gates were skipped because this commit was created by \`github-actions[bot]\` for automated demo regeneration." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Why skip?**" >> $GITHUB_STEP_SUMMARY
            echo "- Demos are auto-generated and don't require linting" >> $GITHUB_STEP_SUMMARY
            echo "- Bot commits using GITHUB_TOKEN don't trigger workflows (GitHub security feature)" >> $GITHUB_STEP_SUMMARY
            echo "- The \`[skip ci]\` flag indicates this is safe to skip" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**What to do?**" >> $GITHUB_STEP_SUMMARY
            echo "‚úÖ This is expected behavior - you can safely merge if all other checks pass" >> $GITHUB_STEP_SUMMARY
          else
            echo "## ü™ù Lefthook Quality Report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### ‚úÖ Quality Gates Passed:" >> $GITHUB_STEP_SUMMARY
            echo "- üîí **Security**: Gitleaks secret detection" >> $GITHUB_STEP_SUMMARY
            echo "- üü® **Code Quality**: Biome formatting & linting" >> $GITHUB_STEP_SUMMARY
            echo "- üî∑ **Type Safety**: TypeScript type checking" >> $GITHUB_STEP_SUMMARY
            echo "- üßπ **Code Hygiene**: Trailing whitespace & EOF fixes" >> $GITHUB_STEP_SUMMARY
            echo "- üß™ **Testing**: Unit, integration, and MCP server tests" >> $GITHUB_STEP_SUMMARY
            echo "- ÔøΩ **Audit**: Dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üìã Configuration:" >> $GITHUB_STEP_SUMMARY
            echo "- **Hook Manager**: Lefthook (replacing pre-commit)" >> $GITHUB_STEP_SUMMARY
            echo "- **Mandatory**: All quality gates must pass for GitHub Copilot Agent" >> $GITHUB_STEP_SUMMARY
            echo "- **Performance**: Parallel execution for faster feedback" >> $GITHUB_STEP_SUMMARY
            echo "- **Note**: YAML/JSON validation and link checking run in separate CI workflows" >> $GITHUB_STEP_SUMMARY
          fi

  # ============================================================================
  # GitHub Copilot Agent Integration Check
  # ============================================================================
  copilot-agent-integration:
    name: ü§ñ GitHub Copilot Agent Integration
    runs-on: ubuntu-latest
    needs: lefthook-quality-gates
    if: github.event_name == 'pull_request' && needs.lefthook-quality-gates.outputs.skip == 'false'

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Set up Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v6
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Install lefthook hooks
        run: npm run hooks:install

      - name: Verify GitHub Copilot Agent compatibility
        run: |
          echo "ü§ñ Verifying GitHub Copilot Agent compatibility..."

          # Check for required lefthook configuration
          if [ ! -f "lefthook.yml" ]; then
            echo "‚ùå lefthook.yml not found - required for GitHub Copilot Agent"
            exit 1
          fi

          # Verify lefthook hooks are installed
          if [ ! -d ".git/hooks" ] || [ ! -f ".git/hooks/pre-commit" ]; then
            echo "‚ùå Lefthook git hooks not installed"
            exit 1
          fi

          # Validate lefthook configuration
          npx lefthook dump > /dev/null || {
            echo "‚ùå Invalid lefthook configuration"
            exit 1
          }

          echo "‚úÖ GitHub Copilot Agent integration verified"
          echo "‚úÖ Lefthook quality gates are properly configured"
          echo "‚úÖ All hooks installed and functional"

      - name: Copilot Agent integration summary
        run: |
          echo "## ü§ñ GitHub Copilot Agent Integration Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Integration Verified:" >> $GITHUB_STEP_SUMMARY
          echo "- **Lefthook**: Properly configured and installed" >> $GITHUB_STEP_SUMMARY
          echo "- **Git Hooks**: Pre-commit and pre-push hooks active" >> $GITHUB_STEP_SUMMARY
          echo "- **Quality Gates**: Mandatory quality checks enforced" >> $GITHUB_STEP_SUMMARY
          echo "- **Compatibility**: Ready for GitHub Copilot Agent workflows" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Configuration Details:" >> $GITHUB_STEP_SUMMARY
          echo "- **Hook Manager**: Lefthook (replaced pre-commit)" >> $GITHUB_STEP_SUMMARY
          echo "- **Security**: Gitleaks secret detection enabled" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Quality**: Biome linting and formatting" >> $GITHUB_STEP_SUMMARY
          echo "- **Type Safety**: TypeScript strict checking" >> $GITHUB_STEP_SUMMARY
          echo "- **Testing**: Comprehensive test suite validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Note**: YAML/JSON and link validation in separate workflows" >> $GITHUB_STEP_SUMMARY

  # ============================================================================
  # Prevent merge if quality gates fail
  # ============================================================================
  quality-gate-check:
    name: üö¶ Quality Gate Status
    runs-on: ubuntu-latest
    needs: [lefthook-quality-gates, copilot-agent-integration]
    if: always()

    steps:
      - name: Check quality gate results
        run: |
          if [ "${{ needs.lefthook-quality-gates.result }}" != "success" ]; then
            echo "‚ùå Lefthook quality gates failed - blocking merge"
            echo "## ‚ùå Quality Gates Failed" >> $GITHUB_STEP_SUMMARY
            echo "All quality gates must pass before merging. Please fix the issues and try again." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ needs.lefthook-quality-gates.outputs.skip }}" != "true" ] && [ "${{ needs.copilot-agent-integration.result }}" != "success" ]; then
            echo "‚ùå GitHub Copilot Agent integration check failed - blocking merge"
            echo "## ‚ùå Copilot Agent Integration Failed" >> $GITHUB_STEP_SUMMARY
            echo "GitHub Copilot Agent integration requirements not met. Please fix and try again." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          echo "‚úÖ All quality gates passed - ready to merge"
          echo "## ‚úÖ Quality Gates Passed" >> $GITHUB_STEP_SUMMARY
          echo "All quality checks completed successfully. Ready for merge!" >> $GITHUB_STEP_SUMMARY
