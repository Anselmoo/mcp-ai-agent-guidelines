# Lefthook Git hooks configuration
# Fast Git hooks manager for maintaining code quality and security

# Global settings
min_version: 1.5.0

# Pre-commit hooks - run before commit is created
pre-commit:
  parallel: true
  commands:
    # ----------------------------- 🔒 Security Tools ---------------------------- #
    gitleaks:
      tags: [security]
      # Moved the long embedded script into a dedicated executable script for clarity and maintainability
      run: ./lefthook/security_check.sh
      fail_text: "🔒 Gitleaks detected secrets in staged files"

    # --------------------------- 🔍 Code Quality Tools -------------------------- #
    biome-check:
      tags: [format, lint]
      glob: "*.{js,jsx,ts,tsx,cjs,cts,mjs,mts,json,jsonc}"
      run: npx biome check --write --files-ignore-unknown=true --no-errors-on-unmatched {staged_files}
      stage_fixed: true
      fail_text: "🟨 Biome formatting/linting issues found"

    typescript-check:
      tags: [types]
      glob: "*.{ts,tsx}"
      run: npx tsc --noEmit
      fail_text: "🔷 TypeScript type checking failed"

    # ----------------------------- 📝 File Validation ---------------------------- #
    yaml-lint:
      tags: [format, lint, validate]
      glob: "*.{yml,yaml}"
      run: |
        if command -v yamllint >/dev/null 2>&1; then
          yamllint {staged_files}
        else
          echo "⚠️  yamllint not found, skipping YAML validation"
          echo "   Install: brew install yamllint (macOS) or pip install yamllint"
        fi
      fail_text: "📄 YAML syntax errors found"

    json-lint:
      tags: [format, lint, validate]
      glob: "*.{json,jsonc}"
      run: |
        for file in {staged_files}; do
          if [ -f "$file" ]; then
            # Use Node.js built-in JSON parser for validation
            node -e "try { JSON.parse(require('fs').readFileSync('$file', 'utf8')); } catch(e) { console.error('Invalid JSON in $file:', e.message); process.exit(1); }" || exit 1
          fi
        done
      fail_text: "📄 JSON syntax errors found"

    # ----------------------------- 📝 File Quality ---------------------------- #
    trailing-whitespace:
      tags: [format]
      glob: "*.{js,jsx,ts,tsx,py,md,yml,yaml,json,txt}"
      run: |
        for file in {staged_files}; do
          if [ -f "$file" ]; then
            perl -i -pe 's/[ \t]+$//' "$file"
          fi
        done
      stage_fixed: true
      fail_text: "🧹 Trailing whitespace removed"

    end-of-file-fixer:
      tags: [format]
      glob: "*.{js,jsx,ts,tsx,py,md,yml,yaml,json,txt}"
      run: |
        for file in {staged_files}; do
          if [ -f "$file" ] && [ -s "$file" ] && [ "$(tail -c1 "$file")" != "" ]; then
            echo "" >> "$file"
          fi
        done
      stage_fixed: true
      fail_text: "🧹 End-of-file issues fixed"

# Pre-push hooks - run before push to remote
pre-push:
  commands:
    dependency-audit:
      tags: [security, audit]
      run: npm audit --omit=dev --audit-level=moderate
      fail_text: "🔒 Dependency vulnerabilities detected - push aborted. Run 'npm audit' for details."

    test-all:
      tags: [test]
      run: npm run test:all
      fail_text: "🧪 Tests failed - push aborted"

    quality-check:
      tags: [quality]
      run: npm run quality
      fail_text: "⚡ Quality checks failed - push aborted"

# Output settings
output:
  - execution
  - success
