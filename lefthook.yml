# Lefthook Git hooks configuration
# Fast Git hooks manager for maintaining code quality and security

# Global settings
min_version: 1.5.0

# Pre-commit hooks - run before commit is created
pre-commit:
  parallel: true
  commands:
    # ----------------------------- 🔒 Security Tools ---------------------------- #
    gitleaks:
      tags: [security]
      run: |
        # Auto-install gitleaks if not available
        if ! command -v gitleaks >/dev/null 2>&1; then
          echo "📦 Gitleaks not found, installing..."

          # Check if Docker is available (prioritize Docker for reliability)
          if command -v docker >/dev/null 2>&1; then
            echo "🐳 Using gitleaks Docker image (recommended)..."
            
            # Try Docker with simple approach
            echo "Running gitleaks scan..."
            WORKSPACE_PATH="$(pwd)"
            docker run --rm -v "${WORKSPACE_PATH}:/workspace:ro" -w /workspace zricethezav/gitleaks:latest detect --verbose --redact --config=.gitleaks.toml --source="."
            DOCKER_EXIT_CODE=$?
            if [ $DOCKER_EXIT_CODE -eq 0 ]; then
              echo "✅ Gitleaks scan completed successfully"
              exit 0
            else
              echo "⚠️  Docker gitleaks had issues (exit code: $DOCKER_EXIT_CODE), falling back to binary installation..."
            fi
          fi

          # Try binary installation as fallback
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m)
          case $ARCH in
            x86_64) ARCH="amd64" ;;
            aarch64|arm64) ARCH="arm64" ;;
            armv7l) ARCH="armv7" ;;
            *) ARCH="unsupported" ;;
          esac

          if [ "$ARCH" != "unsupported" ] && ([ "$OS" = "linux" ] || [ "$OS" = "darwin" ]); then
            echo "📥 Trying binary installation for ${OS}-${ARCH}..."
            INSTALL_DIR="$HOME/.local/bin"
            mkdir -p "$INSTALL_DIR"

            # Try different possible download URLs
            DOWNLOAD_SUCCESS=false
            
            # Try first URL
            URL1="https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-${OS}-${ARCH}"
            echo "Trying: $URL1"
            if curl -sSL "$URL1" -o "$INSTALL_DIR/gitleaks" 2>/dev/null && [ -f "$INSTALL_DIR/gitleaks" ] && [ -s "$INSTALL_DIR/gitleaks" ]; then
              # Check if we got a valid binary (not an HTML error page)
              if file "$INSTALL_DIR/gitleaks" | grep -q "executable"; then
                chmod +x "$INSTALL_DIR/gitleaks"
                export PATH="$INSTALL_DIR:$PATH"
                echo "✅ Gitleaks binary installed successfully"
                DOWNLOAD_SUCCESS=true
              fi
            fi
            
            # Try second URL if first failed
            if [ "$DOWNLOAD_SUCCESS" = "false" ]; then
              rm -f "$INSTALL_DIR/gitleaks"
              URL2="https://github.com/gitleaks/gitleaks/releases/download/v8.21.2/gitleaks-${OS}-${ARCH}"
              echo "Trying: $URL2"
              if curl -sSL "$URL2" -o "$INSTALL_DIR/gitleaks" 2>/dev/null && [ -f "$INSTALL_DIR/gitleaks" ] && [ -s "$INSTALL_DIR/gitleaks" ]; then
                # Check if we got a valid binary (not an HTML error page)
                if file "$INSTALL_DIR/gitleaks" | grep -q "executable"; then
                  chmod +x "$INSTALL_DIR/gitleaks"
                  export PATH="$INSTALL_DIR:$PATH"
                  echo "✅ Gitleaks binary installed successfully"
                  DOWNLOAD_SUCCESS=true
                fi
              fi
            fi
            
            # Clean up if download failed
            if [ "$DOWNLOAD_SUCCESS" = "false" ]; then
              rm -f "$INSTALL_DIR/gitleaks"
            fi
          fi

          # Final check - if still not found, provide instructions
          if ! command -v gitleaks >/dev/null 2>&1; then
            echo "❌ Could not install gitleaks automatically!"
            echo "📋 Please install gitleaks manually using one of these methods:"
            echo ""
            echo "🏠 Homebrew (macOS/Linux):"
            echo "   brew install gitleaks"
            echo ""
            echo "🐧 Linux (manual):"
            echo "   curl -sSL https://github.com/gitleaks/gitleaks/releases/latest/download/gitleaks-linux-amd64 -o ~/.local/bin/gitleaks"
            echo "   chmod +x ~/.local/bin/gitleaks"
            echo "   echo 'export PATH=\"\$HOME/.local/bin:\$PATH\"' >> ~/.bashrc"
            echo ""
            echo "🐳 Docker (any platform):"
            echo "   docker pull zricethezav/gitleaks:latest"
            echo ""
            echo "📁 Then ensure ~/.local/bin is in your PATH or Docker is available"
            echo ""
            echo "⚠️  Skipping gitleaks check for now..."
            exit 0  # Don't fail the commit, just warn
          fi
        fi

        # Run gitleaks with proper configuration
        gitleaks detect --verbose --redact --config=.gitleaks.toml --source="."
      fail_text: "🔒 Gitleaks detected secrets in staged files"

    # --------------------------- 🔍 Code Quality Tools -------------------------- #
    biome-check:
      tags: [format, lint]
      glob: "*.{js,jsx,ts,tsx,cjs,cts,mjs,mts,json,jsonc}"
      run: npx biome check --write --files-ignore-unknown=true --no-errors-on-unmatched {staged_files}
      stage_fixed: true
      fail_text: "🟨 Biome formatting/linting issues found"

    typescript-check:
      tags: [types]
      glob: "*.{ts,tsx}"
      run: npx tsc --noEmit
      fail_text: "🔷 TypeScript type checking failed"

    # ----------------------------- 📝 File Quality ---------------------------- #
    trailing-whitespace:
      tags: [format]
      glob: "*.{js,jsx,ts,tsx,py,md,yml,yaml,json,txt}"
      run: sed -i 's/[[:space:]]*$//' {staged_files}
      stage_fixed: true
      fail_text: "🧹 Trailing whitespace removed"

    end-of-file-fixer:
      tags: [format]
      glob: "*.{js,jsx,ts,tsx,py,md,yml,yaml,json,txt}"
      run: |
        for file in {staged_files}; do
          if [ -f "$file" ] && [ -s "$file" ] && [ "$(tail -c1 "$file")" != "" ]; then
            echo "" >> "$file"
          fi
        done
      stage_fixed: true
      fail_text: "🧹 End-of-file issues fixed"

# Pre-push hooks - run before push to remote
pre-push:
  commands:
    test-all:
      tags: [test]
      run: npm run test:all
      fail_text: "🧪 Tests failed - push aborted"

    quality-check:
      tags: [quality]
      run: npm run quality
      fail_text: "⚡ Quality checks failed - push aborted"

# Output settings
output:
  - execution
  - success
